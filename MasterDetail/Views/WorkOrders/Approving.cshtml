@model MasterDetail.Models.WorkOrder

<h2>Approve Work Order</h2>

<div id="partsModal" class="modal fade in">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="partsModalContent"></div>
        </div>
    </div>
</div>

<div id="laborsModal" class="modal fade in">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="laborsModalContent"></div>
        </div>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.WorkOrderId)
        @Html.HiddenFor(model => model.CustomerId)
        @Html.HiddenFor(model => model.CurrentWorkerId)
        @Html.HiddenFor(model => model.RowVersion)

        <div class="row">
            <div class="col-md-5">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Customer.CompanyName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.OrderDateTime, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.OrderDateTime, "DateReadOnly")
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.TargetDateTime, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.TargetDateTime, "DateReadOnly")
                        @Html.ValidationMessageFor(model => model.TargetDateTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.DropDeadDateTime, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.DropDeadDateTime, "DateReadOnly")
                        @Html.ValidationMessageFor(model => model.DropDeadDateTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.ReworkNotes, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.ReworkNotes, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ReworkNotes, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.WorkOrderStatus, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.WorkOrderStatus, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.CertificationRequirements, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.CertificationRequirements, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.CertificationRequirements, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.CurrentWorker.FullName, "Current Worker", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.CurrentWorker.FullName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>
            </div>

            <div class="col-md-7">
                @{Html.RenderAction("LogEntries", "LogEntries", new { entityFormalNamePlural = "WorkOrders", entityKeyValue = Model.WorkOrderId });}
            </div>
        </div>

        @{Html.RenderAction("Index", "Parts", new { workOrderId = Model.WorkOrderId, readOnly = true });}

        @{Html.RenderAction("Index", "Labors", new { workOrderId = Model.WorkOrderId, readOnly = true });}
        
        <div class="col-md-5">
            <div class="form-group form-group-sm">
                @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Total, "CustomNumberFormat", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>
            </div>
        </div>
        
        <div class="col-md-7">
            <div class="form-group form-group-sm">
                <button type="submit" name="Command" value="PromoteToApproved" class="btn btn-success">Promote to Approved</button>
                <button type="submit" name="Command" value="DemoteToCreated" class="btn btn-danger">Demote to Created</button>
                <button type="submit" name="Command" value="DemoteToRejected" class="btn btn-danger">Demote to Rejected</button>
                <button type="submit" name="Command" value="DemoteToCanceled" class="btn btn-danger">Demote to Canceled</button>
                <button type="submit" name="Command" value="Relinquish" class="btn btn-warning">Relinquish</button>
            </div>            
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", "WorkList")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/workorder.js"></script>
}
